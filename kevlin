#!/usr/bin/env python3

import re

#def is_symbol( t ):
#    return re.match( "[a-z_A-Z][0-9a-z_A-Z]*", t ) is not None

def format( tokens ):
    ret = ""
    first = True
    indent = 0
    for t in tokens:
        if t == "}":
            indent -= 1
            ret += "    " * indent + t + "\n"
            first = True
        elif t == "{":
            ret += "\n" + "    " * indent + t + "\n"
            first = True
            indent += 1
        elif first:
            first = False
            ret += "    " * indent + t
        elif t == ";":
            ret += t + "\n"
            first = True
        else:
            ret += " " + t
    return ret


def assert_equal( act, exp ):
    act = act.strip()
    exp = exp.strip()
    if act != exp:
        raise AssertionError( "\n" + act + "\n!=\n" + exp )

assert_equal(
    format(["int", "x", "=", "0", ";"]),
    """
int x = 0;
"""
)


assert_equal(
    format(["int", "x", "=", "0", ";", "x", "+=", "1", ";"]),
    """
int x = 0;
x += 1;
"""
)


assert_equal(
    format(["if", "(", "x", "==", "0", ")", "{", "x", "=", "1", ";", "}"]),
    """
if ( x == 0 )
{
    x = 1;
}
"""
)


assert_equal(
    format(
        [
            "if", "(", "x", "==", "0", ")",
            "{",
                "x", "=", "1", ";",
            "}",
            "x", "+=", "1", ";"
        ]
    ),
    """
if ( x == 0 )
{
    x = 1;
}
x += 1;
"""
)


assert_equal(
    format(
        [
            "if", "(", "x", "==", "0", ")",
            "{",
                "for", "(", "y", "in", "zs", ")",
                "{",
                    "x", "=", "1", ";",
                "}",
            "}",
        ]
    ),
    """
if ( x == 0 )
{
    for ( y in zs )
    {
        x = 1;
    }
}
"""
)

